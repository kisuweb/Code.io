#include <stdio.h>

#define MAX_SIZE 10

// Define a structure for the static queue
struct StaticQueue {
    int data[MAX_SIZE];
    int front; // Index of the front element
    int rear;  // Index of the rear element
};

// Initialize the static queue
void initialize(struct StaticQueue* queue) {
    queue->front = -1; // Initialize the front to -1
    queue->rear = -1;  // Initialize the rear to -1
}

// Enqueue (push) an element into the queue
int enqueue(struct StaticQueue* queue, int value) {
    if (queue->rear == MAX_SIZE - 1) {
        printf("Queue is full. Cannot enqueue %d.\n", value);
        return 0; // Enqueue operation failed
    } else {
        if (queue->front == -1) {
            queue->front = 0;
        }
        queue->data[++(queue->rear)] = value;
        return 1; // Enqueue operation succeeded
    }
}

// Dequeue (pop) an element from the queue
int dequeue(struct StaticQueue* queue) {
    if (queue->front == -1) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1; // Queue is empty
    } else {
        int dequeuedValue = queue->data[queue->front];
        if (queue->front == queue->rear) {
            // If this is the last element in the queue
            queue->front = queue->rear = -1;
        } else {
            ++(queue->front);
        }
        return dequeuedValue;
    }
}

// Check if the queue is empty
int isEmpty(struct StaticQueue* queue) {
    return queue->front == -1;
}

// Check if the queue is full
int isFull(struct StaticQueue* queue) {
    return queue->rear == MAX_SIZE - 1;
}

int main() {
    struct StaticQueue queue;
    initialize(&queue);

    enqueue(&queue, 1);
    enqueue(&queue, 2);
    enqueue(&queue, 3);

    printf("Dequeue: %d\n", dequeue(&queue));
    printf("Dequeue: %d\n", dequeue(&queue));
    printf("Dequeue: %d\n", dequeue(&queue));

    printf("Is queue empty? %s\n", isEmpty(&queue) ? "Yes" : "No");
    printf("Is queue full? %s\n", isFull(&queue) ? "Yes" : "No");

    return 0;
}
