#include <stdio.h>

#define MAX_SIZE 10

// Define a structure for the stack
struct StaticStack {
    int data[MAX_SIZE];
    int top; // Index of the top element
};

// Initialize the stack
void initialize(struct StaticStack* stack) {
    stack->top = -1; // Initialize the top to -1 (empty stack)
}

// Push an element onto the stack
int push(struct StaticStack* stack, int value) {
    if (stack->top == MAX_SIZE - 1) {
        printf("Stack is full. Cannot push %d.\n", value);
        return 0; // Push operation failed
    } else {
        stack->data[++(stack->top)] = value;
        return 1; // Push operation succeeded
    }
}

// Pop an element from the stack
int pop(struct StaticStack* stack) {
    if (stack->top == -1) {
        printf("Stack is empty. Cannot pop.\n");
        return -1; // Stack is empty
    } else {
        return stack->data[(stack->top)--];
    }
}

// Check if the stack is empty
int isEmpty(struct StaticStack* stack) {
    return stack->top == -1;
}

// Check if the stack is full
int isFull(struct StaticStack* stack) {
    return stack->top == MAX_SIZE - 1;
}

int main() {
    struct StaticStack stack;
    initialize(&stack);

    push(&stack, 1);
    push(&stack, 2);
    push(&stack, 3);

    printf("Pop: %d\n", pop(&stack));
    printf("Pop: %d\n", pop(&stack));
    printf("Pop: %d\n", pop(&stack));

    printf("Is stack empty? %s\n", isEmpty(&stack) ? "Yes" : "No");
    printf("Is stack full? %s\n", isFull(&stack) ? "Yes" : "No");

    return 0;
}

